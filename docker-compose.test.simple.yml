# Docker Compose configuration for test database with simple Node.js test runner

services:
  postgres-test:
    image: postgres:16-alpine
    container_name: postgres-test-db
    environment:
      POSTGRES_DB: test_db
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_password
      POSTGRES_HOST_AUTH_METHOD: trust
      # Performance and timeout settings
      POSTGRES_INITDB_ARGS: "--auth-host=trust --auth-local=trust"
      # Connection settings
      POSTGRES_MAX_CONNECTIONS: 100
      POSTGRES_SHARED_BUFFERS: 128MB
    ports:
      - "5433:5432"
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
    # Enhanced healthcheck with better timeout handling
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test_user -d test_db -h localhost -p 5432"]
      interval: 5s
      timeout: 10s
      retries: 12
      start_period: 30s
    # Ensure container has enough resources
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    # Add restart policy for reliability
    restart: unless-stopped

  db-test:
    image: node:20-alpine
    container_name: db-test-runner
    depends_on:
      postgres-test:
        condition: service_healthy
    environment:
      PGHOST: postgres-test
      PGPORT: 5432
      PGDATABASE: test_db
      PGUSER: test_user
      PGPASSWORD: test_password
    volumes:
      - ./tests/db:/tests
      - ./lib/db:/app/lib/db
      - ./package.json:/app/package.json
      - ./node_modules:/app/node_modules
    working_dir: /tests
    command: >
      sh -c "
        echo '🚀 Starting database tests...' &&
        
        # Install PostgreSQL client
        echo '📦 Installing PostgreSQL client...' &&
        apk add --no-cache postgresql-client &&
        
        # Wait for postgres to be ready with timeout
        echo '⏳ Waiting for PostgreSQL to be ready...' &&
        timeout=300
        elapsed=0
        until pg_isready -h postgres-test -U test_user -d test_db; do
          if [ $$elapsed -ge $$timeout ]; then
            echo '❌ Timeout waiting for PostgreSQL to be ready'
            exit 1
          fi
          echo \"⏳ Waiting for PostgreSQL to be ready... ($$elapsed/$$timeout seconds)\"
          sleep 5
          elapsed=$$((elapsed + 5))
        done &&
        echo '✅ PostgreSQL is ready!' &&
        
        # Verify database connection
        echo '🔍 Verifying database connection...' &&
        psql -h postgres-test -U test_user -d test_db -c 'SELECT version();' &&
        
        # Run our simple database tests
        echo '🧪 Running database schema and integrity tests...' &&
        node scripts/simple-test-runner.js
      "
    profiles:
      - test

volumes:
  postgres_test_data: